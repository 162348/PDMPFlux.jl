var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PDMPFlux","category":"page"},{"location":"#PDMPFlux","page":"Home","title":"PDMPFlux","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PDMPFlux.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PDMPFlux]","category":"page"},{"location":"#PDMPFlux.AbstractPDMP","page":"Home","title":"PDMPFlux.AbstractPDMP","text":"In PDMPFlux, every PDMP sampler is defined to be of subtype of AbstractPDMP.\n\n\n\n\n\n","category":"type"},{"location":"#PDMPFlux.BoundBox","page":"Home","title":"PDMPFlux.BoundBox","text":"BoundBox <: Any\n\n上界関数の出力を格納するための構造体．\n\nAttributes:\n    grid (Float64 Array{T,1}): The grid values.\n    box_max (Float64 Array{T,1}): The maximum values on each segment of the grid.\n    cum_sum (Float64 Array{T,1}): The cumulative sum of box_max.\n    step_size (Float64): The step size of the grid.\n\n\n\n\n\n","category":"type"},{"location":"#PDMPFlux.PDMPState","page":"Home","title":"PDMPFlux.PDMPState","text":"PDMPState <: Any\n\nAbstractPDMP の状態空間の元．次のフィールドを持つ構造体として実装：\n\nAttributes:\n    x (Array{Float64, 1}): position\n    v (Array{Float64, 1}): velocity\n    t (Float64): time\n    is_active (Array{Bool, 1}): indicator for the freezing state. Used in the sampling loop for Sticky samplers.\n\n    ∇U (Function): gradient of the potential function\n    rate (Function): rate function\n    flow (Function): flow function\n    velocity_jump (Function): velocity jump function\n    upper_bound_func (Function): upper bound function\n    upper_bound (Union{Nothing, NamedTuple}): upper bound box\n\n    lambda_bar (Float64): upper bound for the Poisson process\n    exp_rv (Float64): exponential random variable for the Poisson process\n    \n    lambda_t (Float64): rate at the current time\n    horizon (Float64): horizon\n    tp (Float64): time to the next event\n    ts (Float64): time spent\n    tt (Vector{Float64}): remaining frozen time for each coordinate, with dimension `dim`\n    ar (Float64): acceptance rate for the thinning\n\n    adaptive (Bool): adaptive indicator\n    accept (Bool): accept indicator for the thinning\n    stick_or_thaw_event (Bool): indicator for the sticking or thawing event\n    \n    errored_bound (Int): count of the number of errors in the upper bound\n    rejected (Int): count of the number of rejections in the thinning\n    hitting_horizon (Int): count of the number of hits of the horizon\n    \n    key (Any): random key\n\n\n\n\n\n","category":"type"},{"location":"#PDMPFlux.SpeedUpZigZag","page":"Home","title":"PDMPFlux.SpeedUpZigZag","text":"SpeedUpZigZag(dim::Int, ∇U::Function; grid_size::Int=10, tmax::Float64=1.0, \n    vectorized_bound::Bool=true, signed_bound::Bool=true, adaptive::Bool=true, kwargs...)\n\narguments for constructor\n\ndim::Int: 空間の次元。\n∇U::Function: ポテンシャルエネルギー関数の勾配。\ngrid_size::Int: 空間を離散化するためのグリッドポイントの数。デフォルトは10。\ntmax::Float64: グリッドのホライズン。デフォルトは1.0。0の場合、適応的なtmaxが使用されます。\nvectorized_bound::Bool: 境界にベクトル化された戦略を使用するかどうか。デフォルトはtrue。\nsigned_bound::Bool: 符号付き境界戦略を使用するかどうか。デフォルトはtrue。\nadaptive::Bool: 適応的なtmaxを使用するかどうか。デフォルトはtrue。\nkwargs...: その他のキーワード引数。\n\nattributes of a ZigZag construct\n\ndim::Int: 空間の次元。\nrefresh_rate::Float64: リフレッシュレート。\n∇U::Function: ポテンシャルの勾配。\ngrid_size::Int: 空間を離散化するためのグリッドポイントの数。\ntmax::Float64: グリッドのtmax。\nadaptive::Bool: 適応的なtmaxを使用するかどうか。\nvectorized_bound::Bool: ベクトル化された戦略を使用するかどうか。\nsigned_bound::Bool: 符号付き戦略を使用するかどうか。\nflow::Function: インテグレータ関数。\nrate::Array: プロセスのレート。\nrate_vect::Array: ベクトル化されたレート。\nsigned_rate::Array: 符号付きレート。\nsigned_rate_vect::Array: ベクトル化され符号付きのレート。\nvelocity_jump::Function: 速度ジャンプ関数。\nstate: ZigZagサンプラーの状態。\n\n\n\n\n\n","category":"type"},{"location":"#PDMPFlux.StickyZigZag","page":"Home","title":"PDMPFlux.StickyZigZag","text":"StickyZigZag(dim::Int, ∇U::Function; grid_size::Int=10, tmax::Float64=1.0, \n    vectorized_bound::Bool=true, signed_bound::Bool=true, adaptive::Bool=true, kwargs...)\n\narguments for constructor\n\ndim::Int: dimension of the parameter space\n∇U::Function: gradient of the potential function (= negative log-likelihood function)\nκ::Vector{Float64}: prior inclusion probability. default is fill(0.5, dim).\ngrid_size::Int: number of the grid points for discretization of the parameter space. default is 10.\ntmax::Float64: グリッドのホライズン．デフォルトは1.0．0の場合、適応的なtmaxが使用されます．\nvectorized_bound::Bool: 境界にベクトル化された戦略を使用するかどうか．デフォルトはtrue．\nsigned_bound::Bool: 符号付き境界戦略を使用するかどうか．デフォルトはtrue．\nadaptive::Bool: 適応的なtmaxを使用するかどうか．デフォルトはtrue．\nkwargs...: その他のキーワード引数．\n\nattributes of a ZigZag construct\n\ndim::Int: 空間の次元．\nrefresh_rate::Float64: リフレッシュレート．\n∇U::Function: ポテンシャルの勾配．\ngrid_size::Int: 空間を離散化するためのグリッドポイントの数．\ntmax::Float64: グリッドのtmax．\nadaptive::Bool: 適応的なtmaxを使用するかどうか．\nvectorized_bound::Bool: ベクトル化された戦略を使用するかどうか．\nsigned_bound::Bool: 符号付き戦略を使用するかどうか．\nflow::Function: インテグレータ関数．\nrate::Array: プロセスのレート．\nrate_vect::Array: ベクトル化されたレート．\nsigned_rate::Array: 符号付きレート．\nsigned_rate_vect::Array: ベクトル化され符号付きのレート．\nvelocity_jump::Function: 速度ジャンプ関数．\nstate: ZigZagサンプラーの状態．\n\n\n\n\n\n","category":"type"},{"location":"#PDMPFlux.ZigZag","page":"Home","title":"PDMPFlux.ZigZag","text":"ZigZag(dim::Int, ∇U::Function; grid_size::Int=10, tmax::Float64=1.0, \n    vectorized_bound::Bool=true, signed_bound::Bool=true, adaptive::Bool=true, kwargs...)\n\narguments for constructor\n\ndim::Int: 空間の次元。\n∇U::Function: ポテンシャルエネルギー関数の勾配。\ngrid_size::Int: 空間を離散化するためのグリッドポイントの数。デフォルトは10。\ntmax::Float64: グリッドのホライズン。デフォルトは1.0。0の場合、適応的なtmaxが使用されます。\nvectorized_bound::Bool: 境界にベクトル化された戦略を使用するかどうか。デフォルトはtrue。\nsigned_bound::Bool: 符号付き境界戦略を使用するかどうか。デフォルトはtrue。\nadaptive::Bool: 適応的なtmaxを使用するかどうか。デフォルトはtrue。\nkwargs...: その他のキーワード引数。\n\nattributes of a ZigZag construct\n\ndim::Int: 空間の次元。\nrefresh_rate::Float64: リフレッシュレート。\n∇U::Function: ポテンシャルの勾配。\ngrid_size::Int: 空間を離散化するためのグリッドポイントの数。\ntmax::Float64: グリッドのtmax。\nadaptive::Bool: 適応的なtmaxを使用するかどうか。\nvectorized_bound::Bool: ベクトル化された戦略を使用するかどうか。\nsigned_bound::Bool: 符号付き戦略を使用するかどうか。\nflow::Function: インテグレータ関数。\nrate::Array: プロセスのレート。\nrate_vect::Array: ベクトル化されたレート。\nsigned_rate::Array: 符号付きレート。\nsigned_rate_vect::Array: ベクトル化され符号付きのレート。\nvelocity_jump::Function: 速度ジャンプ関数。\nstate: ZigZagサンプラーの状態。\n\n\n\n\n\n","category":"type"},{"location":"#PDMPFlux.ac_step-Tuple{PDMPFlux.PDMPState}","page":"Home","title":"PDMPFlux.ac_step","text":"acceptance-rejection step\nlambda_bar は正確な上界ではなく，grid が粗い場合に足りない可能性がある．\nその場合は erroneous_acceptance_rate() で補正する．\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.ac_step_with_proxy-Tuple{PDMPFlux.PDMPState}","page":"Home","title":"PDMPFlux.ac_step_with_proxy","text":"代理上界 lambda_bar で足りた場合は，ここで簡単に Poisson 剪定を行う．\nPoisson 剪定中に horizon を超えた場合は move_to_horizon2() を呼び出す．\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.erroneous_acceptance_rate-Tuple{PDMPFlux.PDMPState}","page":"Home","title":"PDMPFlux.erroneous_acceptance_rate","text":"代理上界 lambda_bar で足りなかった場合は horizon を縮めてより慎重に ac_step() を繰り返す．\nstate.adaptive = true の場合は，ここで horizon を恒久的に縮めておく．\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.get_event_state-Tuple{PDMPFlux.PDMPState, PDMPFlux.AbstractPDMP}","page":"Home","title":"PDMPFlux.get_event_state","text":"get_event_state(state::PDMPState, sampler::AbstractPDMP)::PDMPState\n\nthe argument `sampler` is only used to implement multiple dispatch.\n\nstate.accept が false である限り，one_step_of_thinning() を繰り返す．\nstate.accept が true になるには ac_step_with_proxy() → if_accept() が呼ばれる必要がある．\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.get_event_state-Tuple{PDMPFlux.PDMPState, PDMPFlux.StickyPDMP}","page":"Home","title":"PDMPFlux.get_event_state","text":"multiple dispatch for get_event_state() function for StickyZigZag\n\nHere, not only an accepted move, but also a crossing of axes and thawing a coordinate constitutes an event,\nleading out of the loop.\n\nWhen the new types of events are identified, it is informed via the `indicator` flag.\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.if_accept-Tuple{PDMPFlux.PDMPState}","page":"Home","title":"PDMPFlux.if_accept","text":"代理上界 lambda_bar を用いた剪定で accept された場合の処置\nここで one_step_of_thinning() を終了するために accept = true とされる．\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.if_reject-Tuple{PDMPFlux.PDMPState}","page":"Home","title":"PDMPFlux.if_reject","text":"代理上界 lambda_bar を用いた剪定で accept されなかった場合の処置\nhorizon を超えるまで Poisson 剪定を繰り返す．\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.init_state","page":"Home","title":"PDMPFlux.init_state","text":"init_state():\nPDMP オブジェクトの状態を初期化する．\n\nArgs:\n    xinit (Float[Array, \"dim\"]): The initial position.\n    vinit (Float[Array, \"dim\"]): The initial velocity.\n    seed (int): The seed for random number generation.\n    upper_bound_vect (bool, optional): Whether to use vectorized upper bound function. Defaults to False.\n    signed_rate (bool, optional): Whether to use signed rate function. Defaults to False.\n    adaptive (bool, optional): Whether to use adaptive upper bound. Defaults to False.\n    constant_bound (bool, optional): Whether to use constant upper bound. Defaults to False.\n\nReturns:\n    PDMPState: The initialized PDMP state.\n\n\n\n\n\n","category":"function"},{"location":"#PDMPFlux.move_to_axes_and_stick-Tuple{PDMPFlux.PDMPState}","page":"Home","title":"PDMPFlux.move_to_axes_and_stick","text":"movement special to `StickyPDMP`` samplers.\nThey move to one of the axes, and start to stick to it.\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.move_to_horizon-Tuple{PDMPFlux.PDMPState}","page":"Home","title":"PDMPFlux.move_to_horizon","text":"tp > state.horizon の場合，もう一度 Poisson simulation を行う．\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.move_to_horizon2-Tuple{PDMPFlux.PDMPState}","page":"Home","title":"PDMPFlux.move_to_horizon2","text":"代理上界 lambda_bar を使った Poisson 剪定中に horizon を超えた場合の動き\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.moves_until_horizon-Tuple{PDMPFlux.PDMPState}","page":"Home","title":"PDMPFlux.moves_until_horizon","text":"tp <= state.horizon の場合の処理\nstate.accept = true になるまでの ac_step() の繰り返しとして実装される．\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.moves_until_horizon_or_axes-Tuple{PDMPFlux.PDMPState, PDMPFlux.StickyPDMP}","page":"Home","title":"PDMPFlux.moves_until_horizon_or_axes","text":"called while \n    1. no axis is crossed\n    and\n    2. min(tp, tt) <= state.horizon\nThis function calls ac_step() until\n    1. state.accept = true\n    or\n    2. tp > state.horizon\n    or\n    3. an axis is crossed\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.next_event-Tuple{PDMPFlux.BoundBox, Float64}","page":"Home","title":"PDMPFlux.next_event","text":"next_event(boundbox, exp_rv):\nBoundBox オブジェクトを用いて次のイベント時間を Poisson 剪定によりシミュレーションする．\nイベント時刻 t_prop とその直前の grid 点での上界の値を返す．\n\nArgs:\n    boundbox: The boundbox object containing the cumulative sum and grid values.\n    exp_rv: The exponential random variable.\n\nReturns:\n    A tuple containing the next event time (t_prop) and the corresponding upper bound value.\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.one_step_of_thinning-Tuple{PDMPFlux.PDMPState}","page":"Home","title":"PDMPFlux.one_step_of_thinning","text":"state.accept が false である限り実行する処理\nmoves_until_horizon() → ac_step_with_proxy() → if_accept() が呼ばれるまで繰り返す．\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.sample-Tuple{PDMPFlux.AbstractPDMP, Int64, Int64, Vector{Float64}, Vector{Float64}}","page":"Home","title":"PDMPFlux.sample","text":"sample()：PDMPSampler からサンプルをするための関数．\nsample_skeleton() と sample_from_skeleton() の wrapper．\n\nArgs:\n    N_sk (Int): Number of skeleton points to generate.\n    N_samples (Int): Number of final samples to generate from the skeleton.\n    xinit (Array{Float64, 1}): Initial position.\n    vinit (Array{Float64, 1}): Initial velocity.\n    seed (Int): Seed for random number generation.\n    verbose (Bool, optional): Whether to print progress information. Defaults to true.\n\nReturns:\n    Array{Float64, 2}: Array of samples generated from the PDMP model.\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.sample_from_skeleton-Tuple{PDMPFlux.AbstractPDMP, Int64, PDMPFlux.PDMPHistory}","page":"Home","title":"PDMPFlux.sample_from_skeleton","text":"スケルトンからサンプリングをし，各行ベクトルに次元毎の時系列が格納された Matrix{Float64} を返す．\n\nArgs:     N (Int): The number of samples to generate.     output (PdmpOutput): The PDMP output containing the trajectory information.\n\nReturns:     Array{Float64, 2}: The sampled points from the PDMP trajectory skeleton.\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.sample_skeleton-Tuple{PDMPFlux.AbstractPDMP, Int64, Union{Float64, Int64}, Union{Float64, Int64}}","page":"Home","title":"PDMPFlux.sample_skeleton","text":"failsafe dispatch of sample_skeleton(), admitting scalar initial values, used mainly for 1d case.\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.sample_skeleton-Tuple{PDMPFlux.AbstractPDMP, Int64, Vector{Float64}, Vector{Float64}}","page":"Home","title":"PDMPFlux.sample_skeleton","text":"sample_skeleton(): PDMP Samplers からスケルトンを抽出する．\n\nParameters:\n- n_sk (Int): The number of skeleton samples to generate.\n- xinit (Array{Float64, 1}): The initial position of the particles.\n- vinit (Array{Float64, 1}): The initial velocity of the particles.\n- seed (Int): The seed value for random number generation.\n- verbose (Bool): Whether to display progress bar during sampling. Default is true.\n\nReturns:\n- output: The output state of the sampling process.\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.set_AD_backend-Tuple{String, Function, Int64}","page":"Home","title":"PDMPFlux.set_AD_backend","text":"Set the AD backend for the <sampler name>AD() constructors defined in src/Samplers/*.jl\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.thaw_one_coordinate-Tuple{PDMPFlux.PDMPState, PDMPFlux.StickyPDMP}","page":"Home","title":"PDMPFlux.thaw_one_coordinate","text":"Now `tt` is reached, time to thaw one coordinate,\nwhich is determined according to the proportion of `state.κ[state.is_active]`.\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.traj_for_animation-Tuple{PDMPFlux.PDMPHistory, Vector{Float64}, Int64, Int64}","page":"Home","title":"PDMPFlux.traj_for_animation","text":"traj_for_animation(): アニメーション用の軌道を抽出する．\n\nParameters:\n- trajectory (Matrix{Float64}): The trajectory to be animated.\n- N_start (Int): The starting index of the trajectory.\n- N_max (Int): The ending index of the trajectory.\n- coordinate_numbers (Array{Int, 1}): The indices of the coordinates to be plotted.\n- dt (Float64): The time step for the animation.\n\nReturns:\n- traj: The snapshots of the trajectory to be animated.\n- event_indeces: The indices of traj, where the events occur.\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.upper_bound_constant","page":"Home","title":"PDMPFlux.upper_bound_constant","text":"upper_bound_constant(func, a, b, n_grid=100, refresh_rate=0.0)\nComputes the constant upper bound using the Brent's algorithm.\nBrent のアルゴリズムを通じて定数でバウンドすることを試みる．必然的に n_grid=2．\n\nParameters:\n- func: The function for which the upper bound constant is computed.\n- a: The lower bound of the interval.\n- b: The upper bound of the interval.\n- n_grid: The number of grid points used for computation (default: 100).\n- refresh_rate: The refresh rate for the upper bound constant (default: 0).\n\nReturns:\n- Tuple: A tuple containing the grid, box_max, cum_sum, and interval length.\n\n\n\n\n\n","category":"function"},{"location":"#PDMPFlux.upper_bound_grid","page":"Home","title":"PDMPFlux.upper_bound_grid","text":"upper_bound_grid(func, start=0.0, horizon, n_grid, refresh_rate)\nCompute the upper bound as a piecewise constant function using a grid mechanism.\n\nArgs:\n    func: the function for which the upper bound is computed\n    start (Float64): the lower bound of the interval\n    horizon (Float64): the upper bound of the interval\n    n_grid (Int64, optional): size of the grid for the upperbound of func. Defaults to 100.\n    refresh_rate (Float64, optional): refresh rate for the upper bound. Defaults to 0.\n\nReturns:\n    BoundBox: An object containing the upper bound constant information.\n\n\n\n\n\n","category":"function"},{"location":"#PDMPFlux.upper_bound_grid_vect","page":"Home","title":"PDMPFlux.upper_bound_grid_vect","text":"upper_bound_grid_vect(func, start, horizon, n_grid)\nCompute the upper bound using a grid with the vectorized strategy\n\nFor this function, func(x) takes vector values with the dimension `dim`.\n\nArgs:\n    func: the function for which the upper bound is computed\n    a (Float64): the lower bound of the interval\n    b (Float64): the upper bound of the interval\n    n_grid (Int64, optional): size of the grid for the upperbound of func. Defaults to 100.\n\nReturns:\n    BoundBox: An object containing the upper bound constant information.\n\n\n\n\n\n","category":"function"}]
}
