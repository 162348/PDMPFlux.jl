var documenterSearchIndex = {"docs":
[{"location":"#PDMPFlux","page":"Home","title":"PDMPFlux","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PDMPFlux.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PDMPFlux\n\nfunction U_Gauss(x::AbstractVector)\n    return sum(x.^2) / 2\nend\n\ndim = 10\nsampler = ForwardECMCAD(dim, U_Gauss)\n\nN_sk, N, xinit, vinit = 1_000_000, 1_000_000, zeros(dim), ones(dim)\nsamples = sample(sampler, N_sk, N, xinit, vinit, seed=2025)\n\njointplot(samples)","category":"page"},{"location":"#PDMPFlux.ForwardECMCAD-Tuple{Int64, Function}","page":"Home","title":"PDMPFlux.ForwardECMCAD","text":"ForwardECMCAD(dim, U; kwargs...)\n\nCreate ForwardECMC sampler with automatic differentiation.\n\nArguments\n\ndim::Int: Dimension of the state space\nU::Function: Potential function\n\nKeywords\n\ngrid_size::Int=10: Number of grid points for upper bound\ntmax::Union{Float64, Int}=2.0: Maximum time horizon\nsigned_bound::Bool=true: Use signed bound strategy\nadaptive::Bool=true: Use adaptive time horizon\nAD_backend::String=\"Zygote\": Automatic differentiation backend\nran_p::Bool=true: Use random orthogonal refresh\nmix_p::Float64=0.5: Mixture probability for refreshment\n\nReturns\n\nForwardECMC: Configured sampler instance\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.sample-Tuple{PDMPFlux.AbstractPDMP, Int64, Int64, Vector{Float64}, Vector{Float64}}","page":"Home","title":"PDMPFlux.sample","text":"sample()：PDMPSampler からサンプルをするための関数．\nsample_skeleton() と sample_from_skeleton() の wrapper．\n\nArgs:\n    N_sk (Int): Number of skeleton points to generate.\n    N_samples (Int): Number of final samples to generate from the skeleton.\n    xinit (Array{Float64, 1}): Initial position.\n    vinit (Array{Float64, 1}): Initial velocity.\n    seed (Int): Seed for random number generation.\n    verbose (Bool, optional): Whether to print progress information. Defaults to true.\n\nReturns:\n    Array{Float64, 2}: Array of samples generated from the PDMP model.\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.sample_from_skeleton-Tuple{PDMPFlux.AbstractPDMP, Float64, PDMPHistory}","page":"Home","title":"PDMPFlux.sample_from_skeleton","text":"スケルトンからサンプリングをし，各行ベクトルに次元毎の時系列が格納された Matrix{Float64} を返す．\n\nArgs:\n    dt (Float64): The time step.\n    output (PdmpOutput): The PDMP output containing the trajectory information.\n\nReturns:\n    Array{Float64, 2}: The sampled points from the PDMP trajectory skeleton.\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.sample_from_skeleton-Tuple{PDMPFlux.AbstractPDMP, Int64, PDMPHistory}","page":"Home","title":"PDMPFlux.sample_from_skeleton","text":"スケルトンからサンプリングをし，各行ベクトルに次元毎の時系列が格納された Matrix{Float64} を返す．\n\nArgs:     N (Int): The number of samples to generate.     output (PdmpOutput): The PDMP output containing the trajectory information.\n\nReturns:     Array{Float64, 2}: The sampled points from the PDMP trajectory skeleton.\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.sample_skeleton-Tuple{PDMPFlux.AbstractPDMP, Int64, Union{Float64, Int64}, Union{Float64, Int64}}","page":"Home","title":"PDMPFlux.sample_skeleton","text":"failsafe dispatch of sample_skeleton(), admitting scalar initial values, used mainly for 1d case.\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.sample_skeleton-Tuple{PDMPFlux.AbstractPDMP, Int64, Vector{Float64}, Vector{Float64}}","page":"Home","title":"PDMPFlux.sample_skeleton","text":"sample_skeleton(): PDMP Samplers からスケルトンを抽出する．\n\nParameters:\n- n_sk (Int): The number of skeleton samples to generate.\n- xinit (Array{Float64, 1}): The initial position of the particles.\n- vinit (Array{Float64, 1}): The initial velocity of the particles.\n- seed (Int): The seed value for random number generation.\n- verbose (Bool): Whether to display progress bar during sampling. Default is true.\n\nReturns:\n- output: The output state of the sampling process.\n\n\n\n\n\n","category":"method"},{"location":"#PDMPFlux.PDMPState","page":"Home","title":"PDMPFlux.PDMPState","text":"PDMPState <: Any\n\nAbstractPDMP の状態空間の元．次のフィールドを持つ構造体として実装：\n\nAttributes:\n    x (Array{Float64, 1}): position\n    v (Array{Float64, 1}): velocity\n    t (Float64): time\n    is_active (Array{Bool, 1}): indicator for the freezing state. Used in the sampling loop for Sticky samplers.\n\n    ∇U (Function): gradient of the potential function\n    rate (Function): rate function\n    flow (Function): flow function\n    velocity_jump (Function): velocity jump function\n    upper_bound_func (Function): upper bound function\n    upper_bound (Union{Nothing, NamedTuple}): upper bound box\n\n    lambda_bar (Float64): upper bound for the Poisson process\n    exp_rv (Float64): exponential random variable for the Poisson process\n    \n    lambda_t (Float64): rate at the current time\n    horizon (Float64): horizon\n    tp (Float64): time to the next event\n    ts (Float64): time spent\n    tt (Vector{Float64}): remaining frozen time for each coordinate, with dimension `dim`\n    ar (Float64): acceptance rate for the thinning\n\n    adaptive (Bool): adaptive indicator\n    accept (Bool): accept indicator for the thinning\n    stick_or_thaw_event (Bool): indicator for the sticking or thawing event\n    \n    errored_bound (Int): count of the number of errors in the upper bound\n    rejected (Int): count of the number of rejections in the thinning\n    hitting_horizon (Int): count of the number of hits of the horizon\n    \n    key (Any): random key\n\n\n\n\n\n","category":"type"},{"location":"#PDMPFlux.SpeedUpZigZag","page":"Home","title":"PDMPFlux.SpeedUpZigZag","text":"SpeedUpZigZag(dim::Int, ∇U::Function; grid_size::Int=10, tmax::Float64=1.0, \n    vectorized_bound::Bool=true, signed_bound::Bool=true, adaptive::Bool=true, kwargs...)\n\narguments for constructor\n\ndim::Int: 空間の次元。\n∇U::Function: ポテンシャルエネルギー関数の勾配。\ngrid_size::Int: 空間を離散化するためのグリッドポイントの数。デフォルトは10。\ntmax::Float64: グリッドのホライズン。デフォルトは1.0。0の場合、適応的なtmaxが使用されます。\nvectorized_bound::Bool: 境界にベクトル化された戦略を使用するかどうか。デフォルトはtrue。\nsigned_bound::Bool: 符号付き境界戦略を使用するかどうか。デフォルトはtrue。\nadaptive::Bool: 適応的なtmaxを使用するかどうか。デフォルトはtrue。\nkwargs...: その他のキーワード引数。\n\nattributes of a ZigZag construct\n\ndim::Int: 空間の次元。\nrefresh_rate::Float64: リフレッシュレート。\n∇U::Function: ポテンシャルの勾配。\ngrid_size::Int: 空間を離散化するためのグリッドポイントの数。\ntmax::Float64: グリッドのtmax。\nadaptive::Bool: 適応的なtmaxを使用するかどうか。\nvectorized_bound::Bool: ベクトル化された戦略を使用するかどうか。\nsigned_bound::Bool: 符号付き戦略を使用するかどうか。\nflow::Function: インテグレータ関数。\nrate::Array: プロセスのレート。\nrate_vect::Array: ベクトル化されたレート。\nsigned_rate::Array: 符号付きレート。\nsigned_rate_vect::Array: ベクトル化され符号付きのレート。\nvelocity_jump::Function: 速度ジャンプ関数。\nstate: ZigZagサンプラーの状態。\n\n\n\n\n\n","category":"type"},{"location":"#PDMPFlux.StickyZigZag","page":"Home","title":"PDMPFlux.StickyZigZag","text":"StickyZigZag(dim::Int, ∇U::Function; grid_size::Int=10, tmax::Float64=1.0, \n    vectorized_bound::Bool=true, signed_bound::Bool=true, adaptive::Bool=true, kwargs...)\n\narguments for constructor\n\ndim::Int: dimension of the parameter space\n∇U::Function: gradient of the potential function (= negative log-likelihood function)\nκ::Vector{Float64}: thawing rate defined from prior inclusion probability. default is fill(0.5, dim).\ngrid_size::Int: number of the grid points for discretization of the parameter space. default is 10.\ntmax::Float64: グリッドのホライズン．デフォルトは1.0．0の場合、適応的なtmaxが使用されます．\nvectorized_bound::Bool: 境界にベクトル化された戦略を使用するかどうか．デフォルトはtrue．\nsigned_bound::Bool: 符号付き境界戦略を使用するかどうか．デフォルトはtrue．\nadaptive::Bool: 適応的なtmaxを使用するかどうか．デフォルトはtrue．\nkwargs...: その他のキーワード引数．\n\nattributes of a ZigZag construct\n\ndim::Int: 空間の次元．\nrefresh_rate::Float64: リフレッシュレート．\n∇U::Function: ポテンシャルの勾配．\ngrid_size::Int: 空間を離散化するためのグリッドポイントの数．\ntmax::Float64: グリッドのtmax．\nadaptive::Bool: 適応的なtmaxを使用するかどうか．\nvectorized_bound::Bool: ベクトル化された戦略を使用するかどうか．\nsigned_bound::Bool: 符号付き戦略を使用するかどうか．\nflow::Function: インテグレータ関数．\nrate::Array: プロセスのレート．\nrate_vect::Array: ベクトル化されたレート．\nsigned_rate::Array: 符号付きレート．\nsigned_rate_vect::Array: ベクトル化され符号付きのレート．\nvelocity_jump::Function: 速度ジャンプ関数．\nstate: ZigZagサンプラーの状態．\n\n\n\n\n\n","category":"type"},{"location":"#PDMPFlux.ZigZag","page":"Home","title":"PDMPFlux.ZigZag","text":"ZigZag(dim::Int, ∇U::Function; grid_size::Int=10, tmax::Float64=1.0, \n    vectorized_bound::Bool=true, signed_bound::Bool=true, adaptive::Bool=true, kwargs...)\n\narguments for constructor\n\ndim::Int: 空間の次元。\n∇U::Function: ポテンシャルエネルギー関数の勾配。\ngrid_size::Int: 空間を離散化するためのグリッドポイントの数。デフォルトは10。\ntmax::Float64: グリッドのホライズン。デフォルトは1.0。0の場合、適応的なtmaxが使用されます。\nvectorized_bound::Bool: 境界にベクトル化された戦略を使用するかどうか。デフォルトはtrue。\nsigned_bound::Bool: 符号付き境界戦略を使用するかどうか。デフォルトはtrue。\nadaptive::Bool: 適応的なtmaxを使用するかどうか。デフォルトはtrue。\nkwargs...: その他のキーワード引数。\n\nattributes of a ZigZag construct\n\ndim::Int: 空間の次元。\nrefresh_rate::Float64: リフレッシュレート。\n∇U::Function: ポテンシャルの勾配。\ngrid_size::Int: 空間を離散化するためのグリッドポイントの数。\ntmax::Float64: グリッドのtmax。\nadaptive::Bool: 適応的なtmaxを使用するかどうか。\nvectorized_bound::Bool: ベクトル化された戦略を使用するかどうか。\nsigned_bound::Bool: 符号付き戦略を使用するかどうか。\nflow::Function: インテグレータ関数。\nrate::Array: プロセスのレート。\nrate_vect::Array: ベクトル化されたレート。\nsigned_rate::Array: 符号付きレート。\nsigned_rate_vect::Array: ベクトル化され符号付きのレート。\nvelocity_jump::Function: 速度ジャンプ関数。\nstate: ZigZagサンプラーの状態。\n\n\n\n\n\n","category":"type"},{"location":"tutorials/quickstart/#Quickstart-Guide","page":"Quickstart Guide","title":"Quickstart Guide","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"PDMPFlux.jl provides a fast and efficient implementation of Piecewise Deterministic Markov Process (PDMP) samplers. This guide will walk you through the basic usage of PDMPFlux.jl.","category":"page"},{"location":"tutorials/quickstart/#Installation","page":"Quickstart Guide","title":"Installation","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"Julia 1.11 or higher is required. Install using Julia's package manager:","category":"page"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"using Pkg\nPkg.add(\"PDMPFlux\")","category":"page"},{"location":"tutorials/quickstart/#Basic-Usage-Examples","page":"Quickstart Guide","title":"Basic Usage Examples","text":"","category":"section"},{"location":"tutorials/quickstart/#1.-Sampling-from-a-Standard-Gaussian-Distribution","page":"Quickstart Guide","title":"1. Sampling from a Standard Gaussian Distribution","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"Let's start with the simplest example - sampling from a standard Gaussian distribution using the Zig-Zag sampler:","category":"page"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"using PDMPFlux\n\n# Define the negative log density function\nfunction U_Gauss(x::Vector)\n    return sum(x.^2) / 2\nend\n\n# Set up the sampler\ndim = 10\nsampler = ZigZagAD(dim, U_Gauss)\n\n# Run sampling\nN_sk, N, xinit, vinit = 1_000_000, 1_000_000, zeros(dim), ones(dim)\nsamples = sample(sampler, N_sk, N, xinit, vinit, seed=2024)\n\n# Visualize results\njointplot(samples)","category":"page"},{"location":"tutorials/quickstart/#2.-Sampling-from-a-Banana-Distribution","page":"Quickstart Guide","title":"2. Sampling from a Banana Distribution","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"For a more complex example, let's try sampling from a Banana distribution (a non-linear distribution):","category":"page"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"using PDMPFlux\nusing Zygote\n\n# Banana distribution negative log density function\nfunction U_banana(x::Vector)\n    mean_x2 = (x[1]^2 - 1)\n    return -(- x[1]^2 + -(x[2] - mean_x2)^2) / 2\nend\n\n# Manually provide gradient\nfunction ∇U_banana(x::Vector)\n    mean_x2 = (x[1]^2 - 1)\n    return -(- x[1] + -(x[2] - mean_x2) - sum(x[3:end]))\nend\n\ndim = 50\nxinit = ones(dim)\nvinit = ones(dim)\ngrid_size = 0  # use constant bounds\n\n# Create and run sampler\nsampler = ZigZag(dim, ∇U_banana, grid_size=grid_size)\noutput = sample_skeleton(sampler, 1_000_000, xinit, vinit)\nsamples = sample_from_skeleton(sampler, 1_000_000, output)\n\n# Visualize trajectory\nplot_traj(output, 10000)\njointplot(samples)","category":"page"},{"location":"tutorials/quickstart/#Available-Samplers","page":"Quickstart Guide","title":"Available Samplers","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"PDMPFlux.jl provides the following samplers:","category":"page"},{"location":"tutorials/quickstart/#Zig-Zag-Sampler","page":"Quickstart Guide","title":"Zig-Zag Sampler","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"ZigZagAD: Uses automatic differentiation\nZigZag: Manual gradient provision","category":"page"},{"location":"tutorials/quickstart/#Bouncy-Particle-Sampler-(BPS)","page":"Quickstart Guide","title":"Bouncy Particle Sampler (BPS)","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"BPSAD: Uses automatic differentiation\nBPS: Manual gradient provision","category":"page"},{"location":"tutorials/quickstart/#Forward-Event-Chain-Monte-Carlo-(Forward-ECMC)","page":"Quickstart Guide","title":"Forward Event Chain Monte Carlo (Forward ECMC)","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"ForwardECMCAD: Uses automatic differentiation\nForwardECMC: Manual gradient provision","category":"page"},{"location":"tutorials/quickstart/#Boomerang-Sampler","page":"Quickstart Guide","title":"Boomerang Sampler","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"BoomerangAD: Uses automatic differentiation\nBoomerang: Manual gradient provision","category":"page"},{"location":"tutorials/quickstart/#Speed-Up-Zig-Zag-(SUZZ)","page":"Quickstart Guide","title":"Speed Up Zig-Zag (SUZZ)","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"SpeedUpZigZagAD: Uses automatic differentiation\nSpeedUpZigZag: Manual gradient provision","category":"page"},{"location":"tutorials/quickstart/#Sticky-Zig-Zag-Sampler","page":"Quickstart Guide","title":"Sticky Zig-Zag Sampler","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"StickyZigZagAD: Uses automatic differentiation\nStickyZigZag: Manual gradient provision","category":"page"},{"location":"tutorials/quickstart/#Visualization-and-Diagnostics","page":"Quickstart Guide","title":"Visualization and Diagnostics","text":"","category":"section"},{"location":"tutorials/quickstart/#Trajectory-Visualization","page":"Quickstart Guide","title":"Trajectory Visualization","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"# Plot 2D trajectory\nplot_traj(output, 10000)\n\n# Plot 3D trajectory\nplot_traj(output, 1000, plot_type=\"3D\")\n\n# Create animation\nanim_traj(output, 1000; filename=\"trajectory.gif\")","category":"page"},{"location":"tutorials/quickstart/#Diagnostic-Functions","page":"Quickstart Guide","title":"Diagnostic Functions","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"# Sampler diagnostics\ndiagnostic(output)","category":"page"},{"location":"tutorials/quickstart/#Sample-Visualization","page":"Quickstart Guide","title":"Sample Visualization","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"# Joint distribution plot\njointplot(samples)\n\n# Marginal distribution plot\nmarginalplot(samples)","category":"page"},{"location":"tutorials/quickstart/#Advanced-Usage","page":"Quickstart Guide","title":"Advanced Usage","text":"","category":"section"},{"location":"tutorials/quickstart/#Custom-Gradient-Provision","page":"Quickstart Guide","title":"Custom Gradient Provision","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"using ForwardDiff\n\n# Gradient calculation using ForwardDiff\n∇U(x::Vector) = ForwardDiff.gradient(U, x)\nsampler = ZigZag(dim, ∇U, grid_size=grid_size)","category":"page"},{"location":"tutorials/quickstart/#Using-Different-AD-Backends","page":"Quickstart Guide","title":"Using Different AD Backends","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"using Zygote\n\n# Gradient calculation using Zygote\n∇U(x::Vector) = gradient(U, x)[1]\nsampler = ZigZag(dim, ∇U, grid_size=grid_size)","category":"page"},{"location":"tutorials/quickstart/#Next-Steps","page":"Quickstart Guide","title":"Next Steps","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"Check the full documentation for more detailed information\nExplore more complex examples in the examples directory\nUnderstand the characteristics of each sampler and choose the appropriate one for your problem","category":"page"},{"location":"tutorials/quickstart/","page":"Quickstart Guide","title":"Quickstart Guide","text":"PDMPFlux.jl is a powerful tool that enables efficient sampling in high dimensions. Start with simple examples and gradually work your way up to more complex problems.","category":"page"}]
}
